#!/bin/bash
## Graficzny instalator kerneli e X t 7 3  - NeteXt'73
## przygotowanie kerneli e X t 7 3 - ext73@wp.pl
## przygotowanie skryptów optymalizacyjnych e X t 7 3
## autor skryptu NeteXt'73 - NetBit73 - netbit73@gmail.com
## opiekun repozytorium eloaders eloaders@linux.pl
## tłumaczenie na język angielski: Tomasz Przybył (FadeMind)
## tłumaczenie na język francuski: Michał Radwański (enedil)
## Licencja: GPL v3: https://www.gnu.org/licenses/gpl.txt
#
#		    _   _      _      __  ___   _ _____ _____
#		   | \ | | ___| |_ ___\ \/ / |_( )___  |___ /
#		   |  \| |/ _ \ __/ _ \\  /| __|/   / /  |_ \
#		   | |\  |  __/ |_  __//  \| |_    / /  ___) |
#		   |_| \_|\___|\__\___/_/\_\\__|  /_/  |____/
#
#	            __ _ _ __ __ _ / _(_) ___ _____ __  _   _
#	           / _` | '__/ _` | |_| |/ __|_  / '_ \| | | |
#	          | (_| | | | (_| |  _| | (__ / /| | | | |_| |
#	           \__, |_|  \__,_|_| |_|\___/___|_| |_|\__, |
#	           |___/                                |___/
#     _           _        _       _                   _                        _ _
#    (_)_ __  ___| |_ __ _| | __ _| |_ ___  _ __      | | _____ _ __ _ __   ___| (_)
#    | | '_ \/ __| __/ _` | |/ _` | __/ _ \| '__|     | |/ / _ \ '__| '_ \ / _ \ | |
#    | | | | \__ \ |_ (_| | | (_| | |_ (_) | |        |   <  __/ |  | | | |  __/ | |
#    |_|_| |_|___/\__\__,_|_|\__,_|\__\___/|_|        |_|\_\___|_|  |_| |_|\___|_|_|
#        __  __  _     _____   _____      ___     _   _      _   ____  _ _  _____ ____
#   ___  \ \/ / | |_  |___  | |___ /     ( _ )   | \ | | ___| |_| __ )(_) |____  |___ /
#  / _ \  \  /  | __|    / /    |_ \     / _ \/\ |  \| |/ _ \ __|  _ \| | __| / /  |_ \
# |  __/  /  \  | |_    / /    ___) |   | (_>  < | |\  |  __/ |_| |_) | | |_ / /  ___) |
#  \___| /_/\_\  \__|  /_/    |____/     \___/\/ |_| \_|\___|\__|____/|_|\__/_/  |____/
#
#########################################################################################################################################################################
#procedury

source /opt/NeteXt73/procedury

sofcik(){
echo "audacity avidemux clementine compizconfig-settings-manager digikam dropbox ffmulticonverter gimp google-chrome-stable grsync guake gufw homebank htop i-nex kadu kget kodi kubuntu-restricted-extras language-pack-gnome-pl libnss3-tools libreoffice-gtk libreoffice-kde libreoffice-style-sifr lubuntu-restricted-extras mc network-manager-openvpn openssh-client openssl oracle-java8-installer pidgin plasma-scriptengines plasma-widget-homerun-kicker plasma widget-yawp ppa-purge radiotray saidar showfoto shutter spotify-client synaptic tomahawk ubuntu-restricted-extras ufw-kde unetbootin unity-tweak-tool vlc wakeonlan wine1.7 wmctrl x2goclient x2goserver xubuntu-restricted-extras yakuake youtube-dl" > ~/.netext73/soft
}

baza=(	
	"ppa:team-xbmc/xbmc-nightly"
	"XBMC wydanie codzienne"
	"XBMC Nightly Builds"
	"kodi"
	
	"ppa:team-xbmc/unstable"
	"XBMC wydanie niestabilne"
	"XBMC Unstable Builds"
	"xbmc"
	
	"ppa:team-xbmc/ppa"
	"XBMC stabilne wydane"
	"XBMC XBMC Stable PPA"
	"xbmc" 
	
	"ppa:oibaf/graphics-drivers"
	"Najnowsze graficzne sterowniki otwarte + Mesa"
	"The latest open graphics drivers + Mesa"
	"vainfo"
	
	"ppa:bumblebee/stable"
	"Nvdia Optimus - bumblebee"
	"Nvdia Optimus - bumblebee"
	"bumblebee"
	
	"ppa:i-nex-development-team/daily"
	"i-nex - narzędzie informujące nt. sprzętu i systemu"
	"i-nex - tool to inform about the hardware and system"
	"i-nex"
	
	"ppa:x2go/stable"
	"X2Go - klient zdalnego dostępu"
	"X2Go - everywhere@home"
	"x2goclient"
	
	"ownCloud"
	"owncloud-client"
	"owncloud-client"
	"owncloud-client"
	
	"ppa:irie/blender"
	"Blender - darmowym/open source pakiet animacji 3D"
	"Blender - free and open source 3D animation suite"
	"blender"
	
	"ppa:klaus-vormweg/bluefish"
	"Bluefish - edytor skierowany do programistów i webdeveloperów"
	"Bluefish - editor targeted towards programmers and webdevelopers"
	"bluefish"

	"ppa:pmjdebruijn/darktable-release"
	"Darktable - wirtualna ciemnia dla fotografów"
	"Darktable - virtual darkroom for photographers"
	"darktable"
	
	"ppa:ffmulticonverter/stable"
	"FF Wielu Converter - prosta graficzna aplikacja, która umożliwia konwertowanie audio, wideo oraz zdjęcia"
	"FF Multi Converter - simple graphical application which enables you to convert audio, video, image"
	"ffmulticonverter"
	
	"ppa:otto-kesselgulasch/gimp"
	"Pakiet graficzny GIMP"
	"GIMP graphics package"
	"gimp gimp-plugin-registry gimp-gmic gmic"
	
	"ppa:dhor/myway"
	"rawtherapee delaboratory easyimagesizer fotoxx inkscape pinta pl"
	"rawtherapee delaboratory easyimagesizer fotoxx inkscape pinta ang"
	"rawtherapee delaboratory easyimagesizer fotoxx inkscape pinta"
	
	"ppa:hugin/hugin-builds"
	"Hugin - łatwy w użyciu, wieloplatformowy zestaw narzędzi do obrazowania panoramicznego - na podstawie Panorama Tools "
	"Hugin - an easy to use cross-platform panoramic imaging toolchain based on Panorama Tools"
	"hugin"
	
	"ppa:webupd8team/java"
	"Instalator Oracle Java (JDK)"
	"Oracle Java (JDK) Installer"
	"oracle-java8-installer"
	
	"ppa:pipelight/stable"
	"Pipelight - Silverlight"
	"Pipelight - Silverlight"
	"Pipelight"
	
	"ppa:kubuntu-ppa/backports"
	"Kubuntu Backports - repozytorium nowych wersji środowiska KDE oraz najważniejszych aplikacji KDE dla Kubuntu"
	"Kubuntu Backports - backports of new versions of KDE and major KDE apps for Kubuntu"
	"kubuntu-desktop"
	
	"ppa:kubuntu-ppa/ppa"
	"Kubuntu PPA"
	"Kubuntu PPA"
	"kubuntu-desktop"
	
	"ppa:libreoffice/ppa"
	"LibreOffice - repozytorium najnowszych wersji pakietu biurowego LibreOffice"
	"LibreOffice - repository of latest version of the office suite LibreOffice"
	"libreoffice"
	
	"ppa:libreoffice/libreoffice-prereleases"
	"LibreOffice - repozytorium najnowszych testowych wersji pakietu biurowego LibreOffice"
	"LibreOffice - repository of latest test version of the office suite LibreOffice"
	"libreoffice"
	
	"ppa:hydr0g3n/qbittorrent-stable"
	"qBittorrent - Codziennie wersje stabilnej gałęzi klienta BitTorrent - qBittorrent"
	"qBittorrent - daily builds for the stable branch of qBittorrent BitTorrent client"
	"qbittorrent"
	
	"ppa:rednotebook/stable"
	"Rednotebook - RedNotebook wieloplatformowy dziennik i graficzny pamiętnik"
	"Rednotebook - RedNotebook is an multiplatform journal and graphical diary"
	"rednotebook"
	
	"ppa:shutter/ppa"
	"Shutter - to zaawansowane narzędzie umożliwiające użytkownikowi łatwe tworzenie zrzutów ekranu oraz ich późniejszą obróbkę"
	"Shutter - is an advanced tool that allows the user to easily create screenshots and their subsequent processing"
	"shutter"
	
	"ppa:stellarium/stellarium-releases"
	"Stellarium - to darmowe, open source'owe planetarium"
	"Stellarium - is a free open source planetarium"
	"Stellarium"
	
	"ppa:me-davidsansome/clementine"
	"Clementine - nowoczesny odtwarzacz muzyki i program do zarządzania kolekcją utworów"
	"Clementine - modern music player and library organizer"
	"clementine"
	"ppa:videolan/stable-daily"
	"VLC - to darmowy i otwarty, wieloplatformowy odtwarzacz multimedialny"
	"VLC - is a free and open, cross-platform media player"
	"vlc"
	
	"ppa:ubuntu-wine/ppa"
	"WINE - Uruchamianie aplikacji Windows na Linuksie"
	"WINE - running Windows applications on Linux"
	"wine1.7"
	
	"deb http://repository.spotify.com stable non-free"
	"Spotify - to serwis muzyki cyfrowej"
	"Spotify - is a digital music service"
	"spotify-client"
	
	"deb http://dl.google.com/linux/chrome/deb/ stable main"
	"Chrome - zamknięta przeglądarka www Google Chrome"
	"Chrome - closed source web browser Google Chrome"
	"google-chrome-stable"
	
	"deb http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib non-free"
	"VirtualBox program do wirtualizacji systemów operacyjnych"
	"VirtualBox is a powerful x86 and AMD64/Intel64 virtualization product"
	"virtualbox-4.3"
	
	"ppa:pinta-maintainers/pinta-stable"
	"Pinta program graficzny wzorowany na Paint.NET."
	"Pinta is a free, open source drawing/editing program modeled after Paint.NET."
	"pinta"
	
	"ppa:plushuang-tw/uget-stable"
	"Uget - akcelerator pobierania plików"
	"Uget - download manager"
	"uget"

	"ppa:leolik/leolik"
	"notifyOSD Patch - poprawiona wersja OSD notify"
	"notifyOSD Patch - fixed OSD notify version"
	"notify-osd"

	"ppa:mozillateam/firefox-next"
	"Oficjalne repozytorium Firefox Beta"
	"The official repository of Firefox Beta"
	"firefox"

	"ppa:mehanik/ksuperkey"
	"Ksuperkey - uruchom program uruchamiający za pomocą klawisza SuperKey"
	"Ksuperkey - bind Superkey for open Launcher Menu"
	"ksuperkey"
	)
#########################################################################################################################################################################
#backuprepo

cd /tmp/netext73
if [ "$(cat /etc/apt/sources.list | grep 'deb' | grep 'partner' | grep '#')" = "" ];then
    menu="$a1!$a2!$a3!$a4!$a5!$a6!$a7!$a8!$MENU2"
else
    menu="$a1!$a2!$a3!$a4!$a5!$a6!$a7!$a8!$MENU1"
fi
backup=$(yad-netext --center --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/backuprepo.png" --image="/opt/NeteXt73/ikony/backuprepo.png" --text="<span color=\"$kolor_textu\">$TEXT_BACKUP1</span>" --form --field=" :CB" \
"$menu" --button="gtk-ok:0" --button="$TEXT_POWROT:1")
klawisz=$?
backup=$(echo $backup | cut -d "|" -f 1)

if [ "$klawisz" = "0" ]; then
#########################################################################################################################################################################
#Przywróć repozytorium z kopii zapasowej

    if [ "$backup" = "$a2" ]; then
	a=$(yad-netext --center --file-selection --filename="$download/" --title="$TEXT_BACKUP2" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --width=550 --height=450)
	if [ "$(echo $a | grep source.list.backu | grep tar.gz)" != "" ]; then
		echo "nie" > /tmp/netext73/ok.txt
		xterm -T backup_repo -e bash -c "echo \"$TEXT_BACKUP3\";sudo mv -f /etc/apt /etc/apt~; sudo tar -xvzf $a -C /etc/; echo "tak" > /tmp/netext73/ok.txt; echo -e \"$TEXT_INSTALACJA\"; read ent"
		if [ "$(cat /tmp/netext73/ok.txt)" = "tak" ]; then
		      dymek "$TEXT_INFORMACJA" "$TEXT_BACKUP4"
		else
		      dymek "$TEXT_INFORMACJA" "$TEXT_BACKUP5"
		fi
	else
		dymek "$TEXT_UWAGA" "$TEXT_BACKUP6"
	fi
#########################################################################################################################################################################
#Stwórz kopię zapasową repozytorium wraz z kluczami GPG

    elif [ "$backup" = "$a1" ]; then
	x-terminal-emulator -e bash -c "echo -e \"$TEXT_BACKUP7\";cd /etc; sudo tar -zcvf $download/source.list.backup_$(date +"%d-%m-%y")_$(lsb_release -irs | tr '\n' '_').tar.gz apt; echo -e \"\n\nBackup:$download/source.list.backup_$(date +'%d-%m-%y')_$(lsb_release -irs | tr '\n' '_').tar.gz\"; echo -e \"$TEXT_INSTALACJA\"; read ent"
#########################################################################################################################################################################
#Pobieranie brakujących kluczy GPG
    elif [ "$backup" = "$a3" ]; then
	rm /tmp/netext73/*.txt -f; rm /tmp/netext73/*.sh -f
	naglowek > instaluj.sh
	klucze >> instaluj.sh
	instalacja_nativ
#########################################################################################################################################################################
    elif [ "$backup" = "$a4" ]; then
	x-terminal-emulator -e bash -c "echo -e \"$a4\n\"; sudo apt-get clean; sudo mv /var/lib/apt/lists /tmp/netext73; sudo mkdir /var/lib/apt/lists; sudo apt-get update; echo -e \"$TEXT_INSTALACJA\"; read ent"
#########################################################################################################################################################################
#Moduł usuwania zbędnych kluczy
  elif [ "$backup" = "$a5" ]; then
	rm *.txt -f
	sprawdz_klucze
	if [ "$(cat klucze1.txt)" != "" ]; then
		grep 'pub' klucze1.txt | cut -d '/' -f 2 | cut -d ' ' -f 1 > klucz.txt
		for i in $(cat klucz.txt); do
		    cat klucze1.txt | grep $i -n | cut -d ':' -f 1 | head -n 1 >> linie.txt
		done
		for i in $(cat linie.txt); do
		    a=$(($i + 1))
		    head -n $a klucze1.txt | tail -n 1 | sed 's/uid//' | sed 's/^[[:space:]]*//' | tr ' ' '_' >> nazwa.txt
		done
		paste -d "]" klucz.txt nazwa.txt  > lista.txt
		sed -i 's/_/ /g' lista.txt
		echo $(sed -e '/^[^#]/s:^:FALSE]:' lista.txt) > lista.txt
		sed -i 's/FALSE/]FALSE/g' lista.txt
		sed -i 's/]//' lista.txt
		petla="tak"
		while [ $petla = "tak" ]; do
		IFS=]
		wybor=$(yad-netext --center --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/klucze.png" --image="/opt/NeteXt73/ikony/klucze.png" --height=420 --width=690  --column="" --column="$TEXT_KLUCZ" --column="$TEXT_DOSTAWCA_KLUCZA" --text="<span color=\"$kolor_textu\">$TEXT_ZAZNACZ_KLUCZE</span>" --list --checklist $(cat lista.txt)  --separator="]" --button="gtk-ok:0" --button="$TEXT_POWROT:1")
		klawisz=$?
		if [ "$klawisz" = "0" ]; then 
			if [ "$(echo $wybor)" != "" ]; then
			    petla="nie"
			    echo $wybor | sed -e 's/TRUE|/\n/g' | cut -d '|' -f 1 | sed -e '/^\ *$/d' | awk '{print $2}' > usun.txt
			    usun_klucze
			else
			    yad-netext --center --error --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/error.png" --image="/opt/NeteXt73/ikony/error.png" --button="gtk-ok:0" --title="$nazwa_skryptu"  --text="$TEXT_NIC_NIE_ZAZNACZYLES"
			fi
		elif [ "$klawisz" = "1" ]; then 
			petla="nie"
		fi
		done | tr '\n' ']'
	else
		yad-netext --center --error --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/error.png" --image="/opt/NeteXt73/ikony/error.png" --button="gtk-ok:0" --title="$nazwa_skryptu"  --text="$TEXT_NIE_POBRALES_KLUCZY"
	fi
	rm *.txt -f
#########################################################################################################################################################################
#instalator repozytoriów

    elif [ "$backup" = "$a6" ]; then
	    
	rm *.txt -f
	ile=$(echo $(( ( ${#baza[*]} ) / 4 )))
	#przepisanie tablicy do osobnych tablic
	for (( i=0; i<=$ile ; i++ ))
	do
		  #nazwa[$i]=${baza[4*$i+0]}
		  repo[$i]=${baza[4*$i+0]}
		  repo_opis[$i]=${baza[4*$i+2]}
		  jezyczek;case $jezyk in pol*)
		      repo_opis[$i]=${baza[4*$i+1]}
		  ;;
		  esac
		  paczka[$i]=${baza[4*$i+3]}
	
	done
	#sprawdzanie które repo mamy w systemie
	ilosc_repo=$(( ${#repo[*]} - 2 ))
	cat /etc/apt/sources.list > repo.txt
	cat /etc/apt/sources.list.d/*.list >> repo.txt
	sed -i '/^#/d' repo.txt; sed -i '/^[ \t]*$/ d' repo.txt
	#zaznaczanie co mieliśmy przed instalacją
	for (( i=0; i<=$ilosc_repo; i++ )); do
		echo ${repo[$i]} | sed 's/ppa://'  > dane.txt
		if [ "$(cat repo.txt | grep -f dane.txt)" != "" ] ; then
		    r[$i]="TRUE"
		else
		    r[$i]="FALSE"
		fi
		echo ${repo_opis[$i]} >> 0.txt
		echo ${r[$i]} >> 1.txt
		
	done
	paste -d "@" 1.txt 0.txt | tr "\n" "@" > lista_repo.txt
	grep TRUE lista_repo.txt | sed 's/TRUE@//g' > lista_przed.txt
	IFS=@
	instalka=$(yad-netext --center --height=540 --width=640 --separator="@"  --window-icon="/opt/NeteXt73/ikony/backuprepo.png" --image="/opt/NeteXt73/ikony/backuprepo.png" --button="gtk-ok:0" --button="$TEXT_POWROT:1" --title="$nazwa_skryptu" \
	--text="<span color=\"$kolor_textu\"><b>Add Repo - automat</b></span>\n$TEXT_MENU_USLUGI2" \
	--column="$TEXT_ZAZNACZ"  --column="opis"  --checklist --list $(cat lista_repo.txt))
	if [ $? = "0" ]; then		
		echo $instalka | sed 's/TRUE//g' > lista_po.txt
		#zaznaczanie co wybraliśmy
		for (( i=0; i<=$ilosc_repo; i++ )); do
			if [ "$(grep $(echo ${repo_opis[$i]}) lista_po.txt )" != "" ] ; then
			    z[$i]="TRUE"
			else
			    z[$i]="FALSE"
			fi
		done
		naglowek > instaluj.sh
		#sprawdzanie różnic przed i po
		for (( i=0; i<=$ilosc_repo; i++ )); do
		    if [ "${r[$i]}" = "TRUE" ] && [ "${z[$i]}" = "TRUE" ]; then
			echo "nie ma zmiany" > /dev/null
		    elif [ "${r[$i]}" = "FALSE" ] && [ "${z[$i]}" = "FALSE" ]; then
			echo "nie ma zmiany" > /dev/null
		    elif [ "${r[$i]}" = "TRUE" ] && [ "${z[$i]}" = "FALSE" ]; then
	# "kasujemy"
			if [ "${repo[$i]}" = "ppa:i-nex-development-team/daily" ]; then
			  echo "sudo ppa-purge -y ${repo[$i]}" >> instaluj.sh
			  echo "sudo ppa-purge -y ppa:nemh/gambas3" >> instaluj.sh
			elif [ "${repo[$i]}" = "deb http://repository.spotify.com stable non-free" ]; then
			  echo "sudo sed -i '/repository.spotify.com stable/ d' /etc/apt/sources.list"  >> instaluj.sh
			  echo "sudo sed -i '/repository.spotify.com stable/ d' /etc/apt/sources.list.d/*"  >> instaluj.sh
			  echo "sudo apt-get purge -y ${paczka[$i]}" >> instaluj.txt
			elif [ "${repo[$i]}" = "deb http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib non-free" ]; then
			  echo "sudo sed -i '/virtualbox/d' /etc/apt/sources.list"  >> instaluj.sh
			  echo "sudo sed -i '/virtualbox/d' /etc/apt/sources.list.d/*"  >> instaluj.sh
			  echo "sudo apt-get purge -y ${paczka[$i]}" >> instaluj.txt
			elif [ "${repo[$i]}" = "ownCloud" ]; then
			  echo "sudo sed -i '/download.opensuse.org\/repositories\/isv:\/ownCloud/d' /etc/apt/sources.list.d/*"  >> instaluj.sh
			  echo "sudo apt-get purge -y ${paczka[$i]}" >> instaluj.txt
			elif [ "${repo[$i]}" = "deb http://dl.google.com/linux/chrome/deb/ stable main" ]; then
			  echo "sudo sed -i '/deb.*dl.google.com\/linux\/chrome\/deb\/ stable main/ d' /etc/apt/sources.list"  >> instaluj.sh
			  echo "sudo sed -i '/deb.*dl.google.com\/linux\/chrome\/deb\/ stable main/ d' /etc/apt/sources.list.d/*"  >> instaluj.sh
			  echo "sudo apt-get purge -y ${paczka[$i]}" >> instaluj.txt
			elif [ "${repo[$i]}" = "ppa:kubuntu-ppa/backports" ]; then
			  echo "sudo ppa-purge -y ${repo[$i]}" >> instaluj.sh
			else
			  echo "sudo ppa-purge -y ${repo[$i]}" >> instaluj.sh
			fi
		    elif [ "${r[$i]}" = "FALSE" ] && [ "${z[$i]}" = "TRUE" ]; then
	# "instalujemy"
			if [ "${repo[$i]}" = "ppa:i-nex-development-team/daily" ]; then
			  echo "sudo add-apt-repository -y ${repo[$i]}" >> instaluj.sh
			  echo "sudo add-apt-repository -y ppa:nemh/gambas3" >> instaluj.sh
			  echo "sudo apt-get install -y  ${paczka[$i]}" >> instaluj.txt
			elif [ "${repo[$i]}" = "deb http://repository.spotify.com stable non-free" ]; then
			  echo "sudo add-apt-repository -y 'deb http://repository.spotify.com stable non-free'" >> instaluj.sh
			  echo "sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 94558F59"  >> instaluj.sh
			  echo "sudo apt-get install -y ${paczka[$i]}" >> instaluj.txt
			elif [ "${repo[$i]}" = "ppa:pipelight/stable" ]; then
			  echo "sudo add-apt-repository -y ${repo[$i]}" >> instaluj.sh
			  echo "sudo apt-get install --install-recommends pipelight-multi" >> instaluj.txt
			  echo "sudo pipelight-plugin --update" >> instaluj.txt
			  echo "sudo pipelight-plugin --enable silverlight" >> instaluj.txt
			elif [ "${repo[$i]}" = "ownCloud" ]; then
			  echo "sudo sh -c \"echo 'deb http://download.opensuse.org/repositories/isv:/ownCloud:/desktop/xUbuntu_$(lsb_release -rs)/ /' >> /etc/apt/sources.list.d/owncloud-client.list\"" >> instaluj.sh
			  echo "wget http://download.opensuse.org/repositories/isv:ownCloud:desktop/xUbuntu_$(lsb_release -rs)/Release.key" >> instaluj.txt
			  echo "sudo apt-key add - < Release.key" >> instaluj.txt
			  echo "sudo apt-get install -y ${paczka[$i]}" >> instaluj.txt
			elif [ "${repo[$i]}" = "ppa:leolik/leolik" ]; then
			  if [ ! -e ~/.notify-osd ]; then
				echo "slot-allocation = dynamic" > ~/.notify-osd
				echo "bubble-expire-timeout = 10sec" >> ~/.notify-osd
				echo "bubble-vertical-gap = 5px" >> ~/.notify-osd
				echo "bubble-horizontal-gap = 5px" >> ~/.notify-osd
				echo "bubble-corner-radius = 37,5%" >> ~/.notify-osd
				echo "bubble-icon-size = 30px" >> ~/.notify-osd
				echo "bubble-gauge-size = 6px" >> ~/.notify-osd
				echo "bubble-width = 240px" >> ~/.notify-osd
				echo "bubble-background-color = 131313" >> ~/.notify-osd
				echo "bubble-background-opacity = 90%" >> ~/.notify-osd
				echo "text-margin-size = 10px" >> ~/.notify-osd
				echo "text-title-size = 100%" >> ~/.notify-osd
				echo "text-title-weight = bold" >> ~/.notify-osd
				echo "text-title-color = ffffff" >> ~/.notify-osd
				echo "text-title-opacity = 100%" >> ~/.notify-osd
				echo "text-body-size = 90%" >> ~/.notify-osd
				echo "text-body-weight = normal" >> ~/.notify-osd
				echo "text-body-color = eaeaea" >> ~/.notify-osd
				echo "text-body-opacity = 100%" >> ~/.notify-osd
				echo "text-shadow-opacity = 100%" >> ~/.notify-osd
				echo "bubble-prevent-fade = 0" >> ~/.notify-osd
				echo "bubble-close-on-click = 1" >> ~/.notify-osd
				echo "bubble-as-desktop-bg = 0" >> ~/.notify-osd
			 fi
			 echo "sudo add-apt-repository -y ${repo[$i]}" >> instaluj.sh
                         echo "sudo apt-get install -y ${paczka[$i]}" >> instaluj.txt
			elif [ "${repo[$i]}" = "deb http://dl.google.com/linux/chrome/deb/ stable main" ]; then
			  echo "echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list" >> instaluj.sh
			  echo "wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -" >> instaluj.sh
			  echo "sudo apt-get install -y ${paczka[$i]}" >> instaluj.txt
			elif [ "${repo[$i]}" = "deb http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib non-free" ]; then
			  echo "sudo sh -c 'wget -q http://download.virtualbox.org/virtualbox/debian/oracle_vbox.asc -O- | apt-key add -' && sudo sh -c 'echo \"deb http://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib non-free\" >> /etc/apt/sources.list.d/virtualbox.list' " >> instaluj.sh
			  echo "sudo apt-get install -y ${paczka[$i]} && sudo usermod -aG vboxusers $(cat /tmp/netext73/userek)" >> instaluj.txt
			    jezyczek;case $jezyk in pol*)
				#dodanie języka polskiego
				echo "wget http://admc.ubuntu-pomoc.org/files/vbox-langpack-pl/qt_pl.qm && wget http://admc.ubuntu-pomoc.org/files/vbox-langpack-pl/VirtualBox_pl.qm && sudo mv qt_pl.qm /usr/share/virtualbox/nls/ && sudo mv VirtualBox_pl.qm /usr/share/virtualbox/nls/" >> instaluj.txt
			    ;;
			    esac
			elif [ "${repo[$i]}" = "ppa:bumblebee/stable" ]; then
			      echo "sudo add-apt-repository -y ${repo[$i]}" >> instaluj.sh
			      if [ "$(lsb_release -r | grep 12.04)" != "" ] || [ "$(lsb_release -r | grep 13.04)" != "" ];then
				  echo "sudo apt-get install bumblebee bumblebee-nvidia virtualgl" >> instaluj.txt
			      elif [ "$(lsb_release -r | grep 13.10)" != "" ] || [ "$(lsb_release -r | grep 14.04)" != "" ]; then
				  echo "sudo apt-get install bumblebee bumblebee-nvidia primus" >> instaluj.txt
			      fi
			elif [ "${repo[$i]}" = "ppa:kubuntu-ppa/backports" ]; then
			  echo "sudo add-apt-repository -y ${repo[$i]}" >> instaluj.sh
			else
			  echo "sudo add-apt-repository -y ${repo[$i]}" >> instaluj.sh
			  echo "sudo apt-get install -y ${paczka[$i]}" >> instaluj.txt
			fi
		    fi
		 done
		 
		 
		if [ "$(grep 'sudo' instaluj.sh)" != "" ]; then
		    echo "sudo apt-get update" >> instaluj.sh
		    cat instaluj.txt >> instaluj.sh
		    echo "sudo apt-get install -f && sudo apt-get dist-upgrade -y && sudo apt-get autoremove -y" >> instaluj.sh
		fi
		instalacja
	fi
	rm *.txt instaluj.sh -f
#########################################################################################################################################################################
#instalator pakietów
    elif [ "$backup" = "$a7" ]; then
	rm *.txt -f
	#zbiór aplikacji
	ilosc=0
	#sortowanie tablicy programów
	#ilosc=$(( ${#soft[*]} ))
	if [ -e ~/.netext73/soft ]; then
	    for a in $(cat ~/.netext73/soft); do
		((ilosc++))
		soft1[$ilosc]=$a
	    done
	else
	    sofcik
	    for a in $(cat ~/.netext73/soft); do
		((ilosc++))
		soft1[$ilosc]=$a
	    done
	fi
	soft=( $(for el in "${soft1[@]}" 
	do
	    echo "$el" 
	done | sort )) 
	ilosc_softu=$(( ${#soft[*]} - 1 ))
	dpkg -l | awk '{print $2}'| sed 's/:.*//g' > programy.txt
	for (( i=0; i<=$ilosc_softu; i++ )); do
		if [ "$(cat programy.txt | grep ${soft[$i]} -x )" != "" ] ; then
		    r[$i]="TRUE"
		else
		    r[$i]="FALSE"
		fi
		echo ${r[$i]} >> 1.txt
		echo ${soft[$i]} >> 2.txt

	done   2>&1 | pobieranie
	paste -d " " 1.txt 2.txt > lista_softu.txt
	grep TRUE lista_softu.txt | awk '{print $2}' > lista_przed.txt

	instalka=$(yad-netext --center --height=540 --width=640 --image="/opt/NeteXt73/ikony/backuprepo.png" --window-icon="/opt/NeteXt73/ikony/backuprepo.png" --button="gtk-ok:0" --button="$TEXT_POWROT:1" --title="$nazwa_skryptu" \
	--text="<span color=\"$kolor_textu\"><b>Add Soft - automat</b></span>\n$TEXT_MENU_USLUGI2" \
	--column="$TEXT_ZAZNACZ" --column="$TEXT_MENU_USLUGI3"  --checklist --list $(cat lista_softu.txt))
	if [ $? = "0" ]; then		 
		echo $instalka | sed 's/|/\n/g' > lista_po.txt

		naglowek > instaluj.sh
		echo "sudo apt-get update"  >> instaluj.sh
		for a in $(cat 2.txt)
		do
		    grep $a lista_przed.txt
		    if [ "$(grep $a lista_przed.txt)" != "" ] && [ "$(grep $a lista_po.txt)" != "" ]; then
			echo "echo \"nie ma zmiany w $a\"" > /dev/null
		    elif [ "$(grep $a lista_przed.txt)" = "" ] && [ "$(grep $a lista_po.txt)" = "" ]; then
			echo "echo \"nie ma zmiany w $a\"" > /dev/null
		    elif [ "$(grep $a lista_przed.txt)" != "" ] && [ "$(grep $a lista_po.txt)" = "" ]; then
			  echo "sudo apt-get purge $a -y" >> instaluj.sh
		    elif [ "$(grep $a lista_przed.txt)" = "" ] && [ "$(grep $a lista_po.txt)" != "" ]; then
			  echo "sudo apt-get install $a -y" >> instaluj.sh
		    fi
		done
		if [ "$(grep 'sudo' instaluj.sh)" != "" ]; then
		    echo "sudo apt-get install -f && sudo apt-get autoremove -y" >> instaluj.sh
		fi
		instalacja
	fi
#########################################################################################################################################################################
#edytor instalatora pakietów
    elif [ "$backup" = "$a8" ]; then
	if [ ! -e ~/.netext73/soft ]; then
	    sofcik
	fi
	nowa_lista=$(yad-netext --center --window-icon="/opt/NeteXt73/ikony/backuprepo.png" --width=400 --height=600 --form --field="$MENU_OPIS:TXT" "$(cat -e ~/.netext73/soft | tr ' ' '\n' | sed 's/\$//g' | sort)" --button="gtk-ok:0" --button="$TEXT_POWROT:1")
	if [ $? = "0" ]; then
	    echo -e $nowa_lista | sed 's/|//g'| tr ' ' '\n' | sed 's/\$//g' | sort | uniq > ~/.netext73/soft
	    sed -i '/^[ \t]*$/ d' ~/.netext73/soft
	fi
#########################################################################################################################################################################
    #dodajemy repo partnerów
    elif [ "$backup" = "$MENU1" ]; then
	x-terminal-emulator -e bash -c "echo -e \"$MENU1\n\"; sudo sed -i '/partner/ s/#//' /etc/apt/sources.list;sudo apt-get update"
#########################################################################################################################################################################
    #usuwamy repo partnerów
    elif [ "$backup" = "$MENU2" ]; then
	x-terminal-emulator -e bash -c "echo -e \"$MENU2\n\"; sudo sed -i '/partner/ s/^/#/' /etc/apt/sources.list;sudo apt-get update"
	      
    fi
fi
