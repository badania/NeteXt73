#!/bin/bash
## Graficzny instalator kerneli e X t 7 3  - NeteXt'73
## przygotowanie kerneli e X t 7 3 - ext73@wp.pl
## przygotowanie skryptów optymalizacyjnych e X t 7 3
## autor skryptu NeteXt'73 - NetBit73 - netbit73@gmail.com
## opiekun repozytorium eloaders eloaders@linux.pl
## tłumaczenie na język angielski: Tomasz Przybył (FadeMind)
## tłumaczenie na język francuski: Michał Radwański (enedil)
## Licencja: GPL v3: https://www.gnu.org/licenses/gpl.txt
#
#		    _   _      _      __  ___   _ _____ _____
#		   | \ | | ___| |_ ___\ \/ / |_( )___  |___ /
#		   |  \| |/ _ \ __/ _ \\  /| __|/   / /  |_ \
#		   | |\  |  __/ |_  __//  \| |_    / /  ___) |
#		   |_| \_|\___|\__\___/_/\_\\__|  /_/  |____/
#
#	            __ _ _ __ __ _ / _(_) ___ _____ __  _   _
#	           / _` | '__/ _` | |_| |/ __|_  / '_ \| | | |
#	          | (_| | | | (_| |  _| | (__ / /| | | | |_| |
#	           \__, |_|  \__,_|_| |_|\___/___|_| |_|\__, |
#	           |___/                                |___/
#     _           _        _       _                   _                        _ _
#    (_)_ __  ___| |_ __ _| | __ _| |_ ___  _ __      | | _____ _ __ _ __   ___| (_)
#    | | '_ \/ __| __/ _` | |/ _` | __/ _ \| '__|     | |/ / _ \ '__| '_ \ / _ \ | |
#    | | | | \__ \ |_ (_| | | (_| | |_ (_) | |        |   <  __/ |  | | | |  __/ | |
#    |_|_| |_|___/\__\__,_|_|\__,_|\__\___/|_|        |_|\_\___|_|  |_| |_|\___|_|_|
#        __  __  _     _____   _____      ___     _   _      _   ____  _ _  _____ ____
#   ___  \ \/ / | |_  |___  | |___ /     ( _ )   | \ | | ___| |_| __ )(_) |____  |___ /
#  / _ \  \  /  | __|    / /    |_ \     / _ \/\ |  \| |/ _ \ __|  _ \| | __| / /  |_ \
# |  __/  /  \  | |_    / /    ___) |   | (_>  < | |\  |  __/ |_| |_) | | |_ / /  ___) |
#  \___| /_/\_\  \__|  /_/    |____/     \___/\/ |_| \_|\___|\__|____/|_|\__/_/  |____/
#
#########################################################################################################################################################################


LATEST_VERSION=$(grep 'v[0-9]' /opt/NeteXt73/changelog | head -n 1 | cut -d 'v' -f 2)

jezyczek(){

#katalog dla sysbench
if [ ! -e ~/.netext73/sysbench ]; then
    mkdir ~/.netext73/sysbench -p
fi

#katalog dla glmark2
if [ ! -e ~/.netext73/glmark2 ]; then
    mkdir ~/.netext73/glmark2 -p
fi

#teksty w języku polskim
if [ -e ~/.netext73/jezyk ] && [ "$(cat ~/.netext73/jezyk)" = "niemiecki" ]; then
    export jezyk="angielski"
    echo 'angielski' >  ~/.netext73/jezyk
fi
if [ -e ~/.netext73/jezyk ]; then
    export jezyk=$(cat ~/.netext73/jezyk)
else
    if [ "$(echo $LANG | grep pl)" != "" ]; then
	    export jezyk="polski"
	    echo 'polski' >  ~/.netext73/jezyk
#    elif [ "$(echo $LANG | grep de)" != "" ]; then
#	    export jezyk="niemiecki"
#	    echo 'niemiecki' >  ~/.netext73/jezyk
    elif [ "$(echo $LANG | grep fr)" != "" ]; then
	    export jezyk="francuski"
	    echo 'francuski' >  ~/.netext73/jezyk
    else
	    export jezyk="angielski"
	    echo 'angielski' >  ~/.netext73/jezyk
    fi
fi

}

source /opt/NeteXt73/tlumaczenia/angielski
jezyczek; case $jezyk in de*)
    source /opt/NeteXt73/tlumaczenia/niemiecki
;;
fr*)
    source /opt/NeteXt73/tlumaczenia/francuski
;;
pol*)
    source /opt/NeteXt73/tlumaczenia/polski
;;
esac

export nazwa_skryptu="NeteXt'73 v$LATEST_VERSION - $TEXT_NETEXT2"
export nazwa_skryptu1="NeteXt'73 v$LATEST_VERSION"

export wersja_apm1="advanced_power_management_by_ext73_conservative-conservative"
export wersja_apm2="advanced_power_management_by_ext73_ondemand-ondemand"
export wersja_apm3="advanced_power_management_by_ext73_intel-performance"
export wersja_apm4="advanced_power_management_by_ext73_intel-powersave"
export wersja_apm5="advanced_power_management_by_ext73_performance-conservative"
export wersja_apm6="advanced_power_management_by_ext73_performance-ondemand"
export error1="dialog-error"
export ikona_info1="dialog-information"
export warning1="dialog-warning"
export adres_opisu="http://www.netext73.pl/search/label/opis_netext73"


#adres serwera
if [ -e ~/.netext73/server_no ]; then
    #if [ "$(cat ~/.netext73/server_no)" = "server2" ];then
	#konto="3999827"
	#wybor_serwera="server2!server1!server3"
    if [ "$(cat ~/.netext73/server_no)" = "server2" ];then
	#konto="3999827"
	export adres_glowny="ftp://37.59.165.105"
	export adres_sterownikow="$adres_glowny/sterowniki2/"
	wybor_serwera="server2!server1"
    else
	export adres_glowny="ftp://37.59.165.105"
	export adres_sterownikow="$adres_glowny/sterowniki2/"
	wybor_serwera="server1!server2"
    fi
else
    export adres_glowny="ftp://37.59.165.105"
    export adres_sterownikow="$adres_glowny/sterowniki2/"
    wybor_serwera="server1!server2"
fi

#premium
if [ "$(grep @ ~/.netext73/kernel_premium)" = "" ]; then
    rm -f ~/.netext73/kernel_premium
fi
if [ -e ~/.netext73/kernel_premium ]; then
    export US1=$(cat ~/.netext73/kernel_premium | cut -d '@' -f 1) 
    export PASS1=$(cat ~/.netext73/kernel_premium | cut -d '@' -f 3)
fi

#sumy sumy kontrolne
export sumy_kontrolne='/tmp/netext73/sumy/sumy_kontrolne.txt'
export adres_sum_kontrolnych='http://dl.dropboxusercontent.com/u/2936246/weryfikacja/sumy.txt'

#kolor textu
if [ -e ~/.netext73/kolor_textu ]; then
      kolor_textu=$(cat ~/.netext73/kolor_textu)
else
      kolor_textu="blue"
fi
if [ "$(cat /proc/cpuinfo | grep Intel)" != "" ]; then
	     export komputerek="INTEL"
elif [ "$(cat /proc/cpuinfo | grep AMD)" != "" ]; then
	     export komputerek="AMD"
fi
#bity
if [ "$(uname -m)" = "x86_64" ]; then
    bit="64bit"
    bit2="amd64"
else 
    yad-netext --center --info --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/info.png" --image="/opt/NeteXt73/ikony/netext.png" --button="gtk-ok:0" --title="$nazwa_skryptu"  --text="$TEXT_STEROWNIKI1"
    exit 1
fi

#adres katalogu download
if [ -e ~/Pobrane ]; then
  export download="/home/$USER/Pobrane"
else
  export download="/home/$USER/Downloads"
fi

if [ $USER = "root" ]; then
     export download="/root"
fi
if [ ! -e $download ]; then
  mkdir -p $download
fi

#########################################################################################################################################################################
#procedury

#pasek postępu pobierania pulsujący gdy coś długo trwa
pobieranie(){
yad-netext --center --width=560 --title="$nazwa_skryptu" --text="$TEXT_POBIERANIE" --progress --pulsate --auto-close --auto-kill --window-icon="/opt/NeteXt73/ikony/download.png" --button="$TEXT_POWROT:1"
}

#pobieranie plików do instalacji kerneli
pobieranie_kerneli(){
if [ "$kern" = "ppa mainline" ];then
	wget $strona/$a #2>&1  | pobieranie 
	if [ "$(grep extra $a)" != "" ]; then
	    yad_wget $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep "all" | grep "linux-headers" | grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-headers"| grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-image-[0-9]"| grep -v -E "latency")  $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-image-extra" | grep "linux-image"| grep -v -E "latency")
	else
	    yad_wget $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep "all" | grep "linux-headers" | grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-headers"| grep -v -E "latency") $strona/$a/$(grep "href=" ./$a | cut -d '"' -f 8 | grep $bit2 | grep "linux-image"| grep -v -E "latency")
	fi
else
#pobieranie kerneli e X t 7 3
	#nazwy paczek dla v30.x
	nazwa_paczki="$(echo $a | cut -d "_" -f 2)$(echo -$rodzaj'_'$bit2.deb)"
	yad_wget $strona/$a/linux-headers-$nazwa_paczki $strona/$a/linux-image-$nazwa_paczki
fi
rm ./index.html -f
}

wersja(){
dymek -i "preferences-other" "$nazwa_skryptu" "$TEXT_INFO1"
}

naglowek(){
echo '#!/bin/bash'
}

naglowek2(){
echo "echo \"$TEXT_PROCEDURA_1\""
echo "sudo sed -i 's+^start on mounted MOUNTPOINT=/proc TYPE=proc+start on mounted MOUNTPOINT=/var+' /etc/init/mounted-proc.conf"
echo "sudo sed -i 's+^start on starting mountall+start on mounted MOUNTPOINT=/var+' /etc/init/ureadahead.conf"
echo "/usr/bin/yes | sudo dpkg -i linux-headers* linux-image*"
#echo "sudo update-initramfs -u -k \$(ls linux-head* | sed 's/linux-headers-//g' | sed 's/_.*//g')"
echo "if [ -e ~/.netext73/archiwum_deb ] && [ \"\$(cat ~/.netext73/archiwum_deb)\" = \"TRUE\" ]; then"
echo "sudo cp *.deb /var/cache/apt/archives/ -f"
echo "fi"
echo "echo 'tak' > /tmp/netext73/ok.txt"
}

stan_firmware(){
twoj_firmware=$(dpkg -l | grep linux-firmware | awk '{print $3}' | head -n 1 | sed 's/~.*//')
if [ "$(cat /proc/cpuinfo | grep Intel)" != "" ]; then
      if [ "$(dpkg -l intel-microcode | grep "ii" | awk '{print $1}'| head -n1)" = "ii" ]; then
	    stan_microcode=$TEXT_TAK
      else
	    stan_microcode="-"
      fi
elif [ "$(cat /proc/cpuinfo | grep AMD)" != "" ]; then
      if [ -e /lib/firmware/amd-ucode/microcode_amd.bin ]; then
	    stan_microcode=$TEXT_TAK
      else
	    stan_microcode="-"
      fi
fi
}

microcode_firmware(){
#nonfree
if [ "$(dpkg -l | grep linux-firmware-nonfree | grep ii )" = "" ]; then
      yad-netext --center --question --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="gtk-ok:0" --button="$TEXT_POWROT:1" --text="$TEXT_PROCEDURA_4"
      if [ $? = 0 ]; then
	    echo "tak" > /tmp/netext73/ok.txt
      else
	    echo "nie" > /tmp/netext73/ok.txt
      fi
else
      echo "nie" > /tmp/netext73/ok.txt
fi
instalacja
}

microcode_inst(){
echo "echo \"$TEXT_PROCEDURA_2\""
echo "sudo apt-get install linux-firmware"
echo "if [ \"\$(cat /tmp/netext73/ok.txt)\" = \"tak\" ]; then"
echo "sudo apt-get install linux-firmware-nonfree -y"
echo "fi"
echo "if [ \"\$(cat /proc/cpuinfo | grep Intel)\" != \"\" ]; then sudo apt-get install intel-microcode -y"
echo "if [ \"\$(lsb_release -c | awk '{print \$2}' | grep 'precise' )\" != \"\" ]; then"
echo "sudo /usr/sbin/update-intel-microcode && sudo microcode_ctl -u"
echo "fi"
echo "else"
echo "sudo apt-get install amd64-microcode -y"
echo "fi"
}

microcode_usun(){
echo "echo \"$TEXT_PROCEDURA_3\""
echo "/usr/bin/yes | sudo dpkg -r linux-firmware-nonfree"
echo "if [ \"\$(cat /proc/cpuinfo | grep Intel)\" != \"\" ]; then sudo apt-get purge intel-microcode -y; fi"
echo "sudo rm /lib/firmware/amd-ucode -r"
echo "sudo apt-get autoremove -y"
}

apm_inst(){
echo "echo \"$TEXT_PROCEDURA_6\""
echo "sudo rm -fr /etc/pm/power.d/* /usr/lib/pm-utils/power.d/readahead /usr/lib/pm-utils/power.d/journal-commit"
echo "if [ ! -e /usr/lib/pm-utils/power.d/wireless ];then"
echo "sudo cp /opt/NeteXt73/APM/wireless /usr/lib/pm-utils/power.d/"
echo "fi"

echo "if [ ! -e /usr/lib/pm-utils/power.d/laptop-mode ];then"
echo "sudo cp /opt/NeteXt73/APM/laptop-mode /usr/lib/pm-utils/power.d/"
echo "fi"
#usunięcie wcześniej tworzonych configów niepotrzebynych od APM 3.7
echo "sudo rm -f /etc/modprobe.d/ums-realtek.conf"
echo "sudo rm -f /etc/modprobe.d/rts5139.conf"
echo "sudo chmod a-x /usr/lib/pm-utils/power.d/*"
echo "cp /opt/NeteXt73/APM/advanced_power_management_by_ext73_$wersja_apm.tar.gz /tmp/netext73/"
echo "tar -xvzf advanced_power_management_by_ext73_$wersja_apm.tar.gz"
echo "sudo mv $wersja_apm1*$wersja_apm $wersja_apm2*$wersja_apm $wersja_apm3*$wersja_apm $wersja_apm4*$wersja_apm $wersja_apm5*$wersja_apm $wersja_apm6*$wersja_apm /etc/pm/power.d/"
echo "sudo mv readahead /usr/lib/pm-utils/power.d/"
echo "rm *tar.gz"
echo "sudo chmod a-x /etc/pm/power.d/*"
echo "if [ -e ~/.netext73/apm_status ]; then"
echo "if [ \"\$(ls /etc/pm/power.d/* | grep \$(cat  ~/.netext73/apm_status | head -n 1))\" != \"\" ]; then" #zaznaczanie aktywnego APM wg configu
echo "sudo chmod a+x \$(ls /etc/pm/power.d/* | grep \$(cat  ~/.netext73/apm_status | head -n 1)) /usr/lib/pm-utils/power.d/readahead"
echo "else"
echo "sudo chmod a+x /etc/pm/power.d/$wersja_apm1*$wersja_apm /usr/lib/pm-utils/power.d/readahead"
echo "fi"
echo "else"
echo "sudo chmod a+x /etc/pm/power.d/$wersja_apm1*$wersja_apm /usr/lib/pm-utils/power.d/readahead"
echo "fi"
echo "sudo chmod a+x /usr/lib/pm-utils/power.d/xfs_buffer /usr/lib/pm-utils/power.d/anacron /usr/lib/pm-utils/power.d/disable_wol /usr/lib/pm-utils/power.d/readahead"
echo "sudo chown root:root /usr/lib/pm-utils/power.d/*"
echo "sudo chown root:root /etc/pm/power.d/*"
echo "sudo apt-get install ethtool"
echo "sudo /etc/init.d/ondemand stop"
echo "sudo update-rc.d -f ondemand remove"
#naprawa powerbtn
echo "if [ \"\$(uname -m)\" = \"x86_64\" ]; then "
echo "if [ \"\$(cat /etc/acpi/powerbtn.sh | grep '/usr/.../qdbus')\" != \"\" ]; then"
echo "sudo cp /etc/acpi/powerbtn.sh /etc/acpi/powerbtn.sh.bak -f"
echo "sudo sed -i 's/\/usr\/...\/qdbus/\/usr\/lib\/x86_64-linux-gnu\/qt4\/bin\/qdbus/' /etc/acpi/powerbtn.sh"
echo "if [ \"\$(cat /etc/acpi/powerbtn.sh | grep '#\/sbin')\" = \"\" ];then"
echo "sudo sed -i '/Power button pressed/ s/\/sbin/#\/sbin/' /etc/acpi/powerbtn.sh"
echo "fi"
echo "fi"
echo "fi"
echo "sudo sed -i '/apm_status_fix/d' /etc/rc.local"
echo "sudo sed -i '/exit 0/d' /etc/rc.local"
echo "echo 'bash /opt/NeteXt73/menu/apm_status_fix' | sudo tee -a /etc/rc.local"
echo "echo 'exit 0' | sudo tee -a /etc/rc.local" 
}

#1 conservative-conservative
#2 ondemand-ondemand
#3 intel-performance
#4 intel-powersave
#5 performance-conservative
#6 performance-ondemand

apm_zmiana(){
echo "echo \"$TEXT_PROCEDURA_8_1 $1 \""
echo "sudo chmod a-x /etc/pm/power.d/*"
echo "sudo chmod a+x /etc/pm/power.d/$2 /usr/lib/pm-utils/power.d/readahead"
echo "sudo chown root:root /etc/pm/power.d/* /usr/lib/pm-utils/power.d/readahead"

echo "if [ \"\$wififix\" = \"FALSE\" ];then"
echo "sudo sed -i 's/echo auto > \$ii/echo on > \$ii/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "else"
echo "sudo sed -i 's/echo on > \$ii/echo auto > \$ii/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"

echo "if [ \"\$btfix\" = \"FALSE\" ];then"
echo "sudo sed -i 's/echo 1 > \$bt/echo 0 > \$bt/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "else"
echo "sudo sed -i 's/echo 0 > \$bt/echo 1 > \$bt/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"

echo "if [ \"\$wifin\" = \"TRUE\" ];then"
echo "sudo rm -f /etc/modprobe.d/wifin.conf"
echo "else"
echo "echo 'options iwlwifi 11n_disable=1' | sudo tee -a /etc/modprobe.d/wifin.conf"
echo "echo 'options ath9k nohwcrypt=1'  | sudo tee -a /etc/modprobe.d/wifin.conf"
echo "fi"

echo "if [ \"\$wifionoff\" = \"FALSE\" ];then"
echo "sudo sed -i 's/echo 1 > \$wifi/echo 0 > \$wifi/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "else"
echo "sudo sed -i 's/echo 0 > \$wifi/echo 1 > \$wifi/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"

echo "if [ \"\$rts5139fix\" = \"TRUE\" ];then"
echo "sudo sed -i '/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' /etc/pm/power.d/advanced_power_management_by_ext73_*"
#echo "sudo sed -i '1,/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "else"
echo "sudo sed -i '/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"
#HDD
echo "if [ \"\$bfqfix\" = \"bfq\" ];then"
echo "sudo sed -i '/#HDD/ s/cfq/bfq/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "sudo sed -i '/#HDD/ s/deadline/bfq/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "elif [ \"\$bfqfix\" = \"cfq\" ];then"
echo "sudo sed -i '/#HDD/ s/bfq/cfq/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "sudo sed -i '/#HDD/ s/deadline/cfq/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "elif [ \"\$bfqfix\" = \"deadline\" ];then"
echo "sudo sed -i '/#HDD/ s/bfq/deadline/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "sudo sed -i '/#HDD/ s/cfq/deadline/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"
#SSD
echo "if [ \"\$ssdfix\" = \"deadline\" ];then"
echo "sudo sed -i '/#SSD/ s/noop/deadline/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "elif [ \"\$ssdfix\" = \"noop\" ];then"
echo "sudo sed -i '/#SSD/ s/deadline/noop/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"
}

apm_zmiana_config(){

echo "if [ \"\$(grep wififix ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"FALSE\" ];then"
echo "sudo sed -i 's/echo auto > \$ii/echo on > \$ii/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "else"
echo "sudo sed -i 's/echo on > \$ii/echo auto > \$ii/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"

echo "if [ \"\$(grep btfix ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"FALSE\" ];then"
echo "sudo sed -i 's/echo 1 > \$bt/echo 0 > \$bt/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "else"
echo "sudo sed -i 's/echo 0 > \$bt/echo 1 > \$bt/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"

echo "if [ \"\$(grep wifin ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"TRUE\" ];then"
echo "sudo rm -f /etc/modprobe.d/wifin.conf"
echo "else"
echo "echo 'options iwlwifi 11n_disable=1' | sudo tee -a /etc/modprobe.d/wifin.conf"
echo "echo 'options ath9k nohwcrypt=1'  | sudo tee -a /etc/modprobe.d/wifin.conf"
echo "fi"

echo "if [ \"\$(grep wifionoff ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"FALSE\" ];then"
echo "sudo sed -i 's/echo 1 > \$wifi/echo 0 > \$wifi/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "else"
echo "sudo sed -i 's/echo 0 > \$wifi/echo 1 > \$wifi/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"

echo "if [ \"\$(grep rts5139fix ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"TRUE\" ];then"
echo "sudo sed -i '/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "sudo sed -i '1,/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "else"
echo "sudo sed -i '/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/ s/sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/sudo rmmod rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb/' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"
#HDD
echo "if [ \"\$(grep bfqfix ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"bfq\" ];then"
echo "sudo sed -i '/#HDD/ s/cfq/bfq/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "sudo sed -i '/#HDD/ s/deadline/bfq/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"

echo "elif [ \"\$(grep bfqfix ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"cfq\" ];then"
echo "sudo sed -i '/#HDD/ s/bfq/cfq/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "sudo sed -i '/#HDD/ s/deadline/cfq/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"

echo "elif [ \"\$(grep bfqfix ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"deadline\" ];then"
echo "sudo sed -i '/#HDD/ s/bfq/deadline/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "sudo sed -i '/#HDD/ s/cfq/deadline/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"
#SSD
echo "if [ \"\$(grep ssdfix ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"deadline\" ];then"
echo "sudo sed -i '/#SSD/ s/noop/deadline/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"

echo "elif [ \"\$(grep ssdfix ~/.netext73/apm_status | cut -d ' ' -f 2)\" = \"noop\" ];then"
echo "sudo sed -i '/#SSD/ s/deadline/noop/g' /etc/pm/power.d/advanced_power_management_by_ext73_*"
echo "fi"
}

apm_usun(){
echo "echo \"$TEXT_PROCEDURA_9\""
echo "sudo rm -fr /etc/pm/power.d/advanced_power_management_by_ext73* /usr/lib/pm-utils/power.d/readahead"
echo "if [ ! -e /usr/lib/pm-utils/power.d/laptop-mode ];then"
echo "wget $adres_skryptow/wireless"
echo "sudo mv wireless /usr/lib/pm-utils/power.d/"
echo "fi"

echo "if [ ! -e /usr/lib/pm-utils/power.d/wireless ];then"
echo "wget $adres_skryptow/laptop-mode"
echo "sudo mv laptop-mode /usr/lib/pm-utils/power.d/"
echo "fi"

echo "sudo chmod a+x /usr/lib/pm-utils/power.d/*"
echo "sudo chown root:root /usr/lib/pm-utils/power.d/*" 
#przywrócenie powerbtn
echo "if [ -e /etc/acpi/powerbtn.sh.bak ]; then"
echo "sudo mv /etc/acpi/powerbtn.sh.bak /etc/acpi/powerbtn.sh -f"
echo "sudo chmod a+x /etc/acpi/powerbtn.sh"
echo "sudo chown root:root /etc/acpi/powerbtn.sh"
echo "sudo rm /etc/modprobe.d/rts5139.conf -f"
echo "sudo rm /etc/modprobe.d/ums-realtek.conf -f"
echo "fi"
echo "sudo update-rc.d -f ondemand defaults"
echo "sudo /etc/init.d/ondemand start"
echo "sudo sed -i '/apm_status_fix/d' /etc/rc.local"
}

stan_apm(){
if [ "$(ls /etc/pm/power.d/ | wc | awk '{print $1}')" != "6" ]; then
      stan_apm="-"
else
      if [ -e /etc/pm/power.d/$wersja_apm1*$wersja_apm ]; then
	    stan_apm=$(ls /etc/pm/power.d/ -Fl | grep '*' | awk '{print $9}' | sed 's/*//' | sed 's/advanced_power_management_by_ext73_//' | sed 's/_v.*//')
      else
	    stan_apm="-"
      fi
fi
#if [ ! -e /etc/modprobe.d/rts5139.conf ] && [ ! -e /etc/modprobe.d/ums-realtek.conf ]; then
#      stan_apm="-"
#fi

if [ "$(ls /etc/pm/power.d/ | wc | awk '{print $1}')" = "6" ] && [ $( ls /usr/lib/pm-utils/power.d/ -la | grep rwxr | wc | awk '{print $1}') != "6" ]; then 
	    stan_apm="-"
fi
if [ "$(grep apm_status_fix /etc/rc.local)" = "" ]; then
	    stan_apm="-"
fi
}

stan_apm_config(){
	#sprawdzenie stanu APM wifi FIX
	if [ "$(grep 'echo auto > $ii' /etc/pm/power.d/advanced_power_management_by_ext73_*)" = "" ];then
	    export wififix="FALSE"
	else
	    export wififix="TRUE"
	fi
	#włączenie wyłączenie wifi
	if [ "$(grep 'echo 1 > $wifi' /etc/pm/power.d/advanced_power_management_by_ext73_*)" = "" ];then
	    export wifionoff="FALSE"
	else
	    export wifionoff="TRUE"
	fi

	#sprawdzenie stanu bt FIX
	if [ "$(grep 'echo 1 > $bt' /etc/pm/power.d/advanced_power_management_by_ext73_*)" = "" ];then
	    export btfix="FALSE"
	else
	    export btfix="TRUE"
	fi

	#sprawdzenie stanu APM rts5139 FIX
	if [ "$(grep 'sudo modprobe rtsx_usb_sdmmc rtsx_usb_ms rtsx_usb' /etc/pm/power.d/advanced_power_management_by_ext73_*)" = "" ];then
	    export rts5139fix="FALSE"
	else
	    export rts5139fix="TRUE"
	fi
	#sprawdzenie wifi N
	if [ -e /etc/modprobe.d/wifin.conf ] ;then
	    export wifin="FALSE"
	else 
	    export wifin="TRUE"
	fi
	#sprawdzenie BFQ/CFQ/deadline HDD
	if [ "$(grep 'bfq' /etc/pm/power.d/advanced_power_management_by_ext73_*)" != "" ] ;then
	    export bfqfix="bfq"; export bfqfix_menu="bfq!cfq!deadline"
	elif [ "$(grep 'cfq' /etc/pm/power.d/advanced_power_management_by_ext73_*)" != "" ]; then
	    export bfqfix="cfq"; export bfqfix_menu="cfq!bfq!deadline"
	elif [ "$(grep 'deadline' /etc/pm/power.d/advanced_power_management_by_ext73_*)" != "" ]; then
	    export bfqfix="deadline"; export bfqfix_menu="deadline!bfq!cfq"
	fi
	#sprawdzenie noop/deadline SSD
	if [ "$(grep 'noop' /etc/pm/power.d/advanced_power_management_by_ext73_* | grep '#SSD' )" != "" ] ;then
	    export ssdfix="noop"; export ssdfix_menu="noop!deadline"
	elif [ "$(grep 'deadline' /etc/pm/power.d/advanced_power_management_by_ext73_* | grep '#SSD')" != "" ]; then
	    export ssdfix="deadline"; export ssdfix_menu="deadline!noop"
	fi	
	
	export wifin_przed=$wifin
	export wififix_przed=$wififix
	export wifionoff_przed=$wifionoff
	export btfix_przed=$btfix
	export rts5139fix_przed=$rts5139fix
	export bfqfix_przed=$bfqfix
	export ssdfix_przed=$ssdfix
	#wysłanie danych do configu 
	ls /etc/pm/power.d/ -Fl | grep '*' | awk '{print $9}' | sed 's/*//' | sed 's/advanced_power_management_by_ext73_//' | sed 's/_v.*//' > ~/.netext73/apm_status
	echo "wififix $wififix" >> ~/.netext73/apm_status
	echo "wifionoff $wifionoff" >> ~/.netext73/apm_status
	echo "btfix $btfix">> ~/.netext73/apm_status
	echo "rts5139fix $rts5139fix" >> ~/.netext73/apm_status
	echo "wifin $wifin" >> ~/.netext73/apm_status
	echo "bfqfix $bfqfix" >> ~/.netext73/apm_status
	echo "ssdfix $ssdfix" >> ~/.netext73/apm_status
}

usun_kernel(){
echo "echo \"$TEXT_KERNEL1 $(cat /tmp/netext73/kasuj.txt | sed 's/TRUE//g' | tr '\n' ' ' )\""
echo "sudo apt-get purge $(cat /tmp/netext73/kasuj.txt | sed 's/TRUE//g' | tr '\n' ' ')"
echo "sudo update-grub"
echo "if [ \"$(dpkg -l | grep '^rc' | awk '{print $2}' | head -n1)\" != \"\" ]; then sudo dpkg -l | grep '^rc' | awk '{print \$2}' | xargs sudo dpkg --purge; fi"
echo "rm /tmp/netext73/*.txt -f; rm /tmp/netext73/*.sh -f"
}

#instalacja za chwile nastąpi wprowadzenie zmian
instalacja(){
xterm -T instalator -e bash -c "echo \"$TEXT_INSTALACJA1\";sh instaluj.sh  && rm instaluj.sh -f ; echo -e \"$TEXT_INSTALACJA2\"; read ent; echo 'tak' > /tmp/netext73/ok.txt"
}

instalacja_nativ(){
x-terminal-emulator -e bash -c "echo \"$TEXT_INSTALACJA1\";sh instaluj.sh && rm instaluj.sh -f ; echo -e \"$TEXT_INSTALACJA2\"; read ent; echo 'tak' > /tmp/netext73/ok.txt"
}

#instalacja bez pytań
instalacja2(){
xterm -T instalator -e bash -c "sh instaluj.sh && rm instaluj.sh -f"
}
#instalacja wciśnij enter
instalacja3(){
xterm -T instalator -e bash -c "sudo sh instaluj.sh && rm instaluj.sh -f ; echo -e \"$TEXT_INSTALACJA2\"; read ent; echo 'tak' > /tmp/netext73/ok.txt"
}

lista_kerneli(){
if [ "$1" = "update" ]; then
      if [ -e ~/.netext73/kernel_premium ] && [ "$(grep @ ~/.netext73/kernel_premium)" != "" ] ; then
	      wget --user=$US1 --password=$PASS1  $adres_glowny/kernele_premium/ -O kernel.txt | wget https://www.kernel.org/ -O stable.txt 2>&1 | pobieranie
      else
	      wget $adres_glowny/kernele/ -O kernel.txt | wget https://www.kernel.org/ -O stable.txt 2>&1 | pobieranie
      fi
else
echo $kern > ~/.netext73/instalator_kerneli #zapamiętanie wybranego kernela
if [ "$(echo $kern | grep i7)" != "" ] || [ "$(echo $kern | grep Brazos)" != "" ]; then
    #adres kerneli premium
    if [ -e ~/.netext73/kernel_premium ] && [ "$(cat  ~/.netext73/kernel_premium)" != "" ]; then
	strona="$adres_glowny/kernele_premium/"
    else
	str=""
	##
	strona=$(yad-netext --center --entry --width=610 --window-icon="/opt/NeteXt73/ikony/linux.png" --title="$nazwa_skryptu" --text="$TEXT_STRONA1" --entry-text="$str" --button="gtk-ok:0" --button="$TEXT_POWROT:1")
	klawisz=$?
	if [ "$klawisz" = "1" ]; then
		blad=1
	else
		if [ "$strona" != "" ]; then
			if [ $? = 0 ]; then
				echo $strona > ~/.netext73/kernel_premium
				if [ "$strona" != "" ]; then
					#zrodlo=$(echo $strona | sed -e "s/index.html//g")
					strona="$adres_glowny/kernele_premium/"
				fi
			fi
		fi
	fi
    fi
    rm index.html -f; wget --user=$US1 --password=$PASS1  $adres_glowny/kernele_premium/ 2>&1 | pobieranie 
else
    strona="$adres_glowny/kernele/"
    rm index.html -f; wget $strona 2>&1 | pobieranie 
fi
echo $(grep 'href="ftp' index.html | grep 'v' | cut -d '"' -f 2 | sed 's/.*v/v/g' | sed 's/\///g') | tr ' ' '\n' > 2.txt
dpkg -l |grep linux-image | awk '{print $2}' | grep $rodzaj | sed 's/linux-image-//g'  > 3.txt

for kernel in $(cat 2.txt); do
    echo "$kernel" >> 4.txt
	for kernel1 in $(cat 3.txt); do
	      if [ "$(echo $kernel | grep $(echo $kernel1 | sed "s/-$rodzaj.*//g"))" != "" ]; then
		  if [ "$(echo $kernel1 | grep pro )" != "" ] && [ "$(echo $rodzaj | grep pro)" = "" ]; then
		      echo "nic" > /dev/null
		  else
		      sed 4.txt -i -e "s/$kernel/$kernel tak/g"
		  fi
	      fi
	done
done
cat 4.txt | awk '{print $2}' >5.txt; sed -i 's/^[ \t]*$/-/' 5.txt
paste -d " "  2.txt 5.txt > 4.txt
sort -r 4.txt > 3.txt;  echo $(sed -e '/^[^#]/s:^:FALSE :' 3.txt) > 1.txt
lista=$(sed  's/FALSE/TRUE/' 1.txt ); rm *.txt -f
if [ "$(echo $lista)" = "TRUE" ]; then
    yad-netext --center --info --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/info.png" --image="/opt/NeteXt73/ikony/info.png" --button="gtk-ok:0"  --timeout=15 --text="Błąd pobierania danych z serwera"
    blad=11
else
    aa=$(yad-netext --center --height=340 --width=690 --window-icon="/opt/NeteXt73/ikony/linux.png" --title="$nazwa_skryptu" --text="$TEXT_PLATFORMA1 <b><span color=\"$kolor_textu\">$rodzaj</span></b>$TEXT_PLATFORMA2" --column="$TEXT_ZAZNACZ" --column="$TEXT_WYBIERZ_KERNEL" --column="$TEXT_ZNITY1" --button="$TEXT_POWROT:1" --button="gtk-ok:0" --list --radiolist $lista)
    klawisz=$?
    a=$(echo $aa | cut -d "|" -f 2)	#wybrany kernel
    a1=$(echo $aa | cut -d "|" -f 3)	#czy zainstalowany jeżeli '-' można instalować
fi
fi
}

grub(){
echo "echo \"$TEXT_PROCEDURA_13\""
echo "echo \"$TEXT_GRUB1 /etc/default/grub\"; sudo sed -i '/GRUB_CMDLINE_LINUX=/d' $sciezka/grub"
echo "echo \"$TEXT_GRUB2 /etc/default/grub\"; sudo sed \"/GRUB_CMDLINE_LINUX_DEFAULT/a\GRUB_CMDLINE_LINUX=\\\"$wpis_grub\\\"\" $sciezka/grub > /tmp/netext73/grub1"
echo "sudo mv /tmp/netext73/grub1 $sciezka/grub -f"
echo "if [ \"\$grub_pro\" != \"tak\" ]; then"
echo "if [ \"\$(cat /etc/default/grub | grep '#GRUB_HIDDEN_TIMEOUT=')\" = \"\" ]; then"
echo "sudo sed -i 's/GRUB_HIDDEN_TIMEOUT=/#GRUB_HIDDEN_TIMEOUT=/g' /etc/default/grub"
echo "fi"
echo "if [ \"\$w3\" != \"\" ]; then"
echo "sudo sed /etc/default/grub -i -e \"s/GRUB_TIMEOUT=.*/GRUB_TIMEOUT=$w3/\""
echo "fi"
echo "sudo sed -i -e \"s/.*GRUB_GFXMODE=.*/GRUB_GFXMODE=$w4/\" /etc/default/grub"
echo "if [ \"\$w5\" != \"\" ];then"
echo "sudo sed -i -e \"s/.*GRUB_GFXPAYLOAD_LINUX=.*/GRUB_GFXPAYLOAD_LINUX=$w5/\" /etc/default/grub"
echo "fi"
echo "sudo sed -i '/GRUB_BACKGROUND/ d'  /etc/default/grub"
echo "if [ \"\$grub_back\" = \"TRUE\" ]; then"
echo "echo 'GRUB_BACKGROUND=/opt/NeteXt73/menu/grub_background.png' | sudo tee -a /etc/default/grub"
echo "fi"
echo "fi"
echo "if [ \"\$starter\" != \"\" ];then"
echo "sudo sed -i -e \"s/GRUB_DEFAULT=.*/GRUB_DEFAULT='$starter'/\" /etc/default/grub"
echo "else"
echo "sudo sed -i -e \"s/GRUB_DEFAULT=.*/GRUB_DEFAULT=0/\" /etc/default/grub"
echo "fi"
echo "sudo chown root:root /etc/default/grub"
echo "sudo update-grub"  
echo "echo 'tak' > /tmp/netext73/ok.txt"

}

instaluj_grub(){
echo "echo \"$TEXT_PROCEDURA_13\"'"
echo "nie" > /tmp/netext73/ok.txt
naglowek > /tmp/netext73/instaluj.sh
grub >> /tmp/netext73/instaluj.sh
instalacja2
if [ "$(cat /tmp/netext73/ok.txt)" = "tak" ]; then
      dymek -i $ikona_info1 "$TEXT_INFORMACJA" "$TEXT_GRUB2 $sciezka/grub. $TEXT_WYMAGANY_RESTART"
else
      dymek i $warning1 "$TEXT_UWAGA" "$TEXT_GRUB3"
fi
}

wywal_pobrane_pliki_kernela(){
if [ "$(cat /tmp/netext73/ok.txt)" = "tak" ]; then
    yad-netext --center --info --title="$nazwa_skryptu"  --window-icon="/opt/NeteXt73/ikony/info.png" --image="/opt/NeteXt73/ikony/info.png" --button="gtk-ok:0"  --timeout=15 --text="$TEXT_KERNEL2"
    rm -rf $PWD
elif  [ "$(cat /tmp/netext73/ok.txt)" = "nie" ]; then
    dymek -i $ikona_info1 "$TEXT_UWAGA" "$TEXT_INFO2<br>/tmp/netext73/$a"
fi
}

klucze(){
echo "sudo apt-get update 2> /tmp/netext73/keymissing"
echo "for key in \$(grep 'NO_PUBKEY' /tmp/netext73/keymissing |sed \"s/.*NO_PUBKEY //\"); do"
echo "gpg --recv-keys \"\$key\""
echo "gpg --armor --export \"\$key\" | sudo apt-key add -"
echo "done"
echo "sudo apt-get update 2> /tmp/netext73/keymissing"
echo "cat /tmp/netext73/keymissing |sed \"s/.*publicznego://\" > 1.txt"
echo "sed -e \"/^$/d\" 1.txt > /tmp/netext73/keymissing"
echo "for key in \$(cat /tmp/netext73/keymissing); do"
echo "gpg --keyserver keyserver.ubuntu.com --recv-keys \$key"
echo "gpg --export -a \$key | sudo apt-key add -"
echo "done"
echo "rm -f /tmp/netext73/keymissing 1.txt"
}

radeon(){
echo "echo \"$TEXT_PROCEDURA_14\""
echo "sudo apt-get install lib32gcc1 libc6-i386"
echo "sudo dpkg -P fglrx fglrx-amdcccle xvba-va-driver"
echo "/usr/bin/yes | sudo dpkg -i *.deb"
echo "sudo apt-get install xvba-va-driver -y"
echo "if [ -e ~/.netext73/archiwum_deb ] && [ \"\$(cat ~/.netext73/archiwum_deb)\" = \"TRUE\" ]; then"
echo "sudo cp *.deb /var/cache/apt/archives/ -f"
echo "fi"
echo "rm *.deb -f"
#echo "DRIVER=/usr/lib/fglrx/xorg/modules/drivers/fglrx_drv.so"
#echo "for x in \$(objdump -d \$DRIVER|awk '/call/&&/EnableLogo/{print \"\\\x\"\$2\"\\\x\"\$3\"\\\x\"\$4\"\\\x\"\$5\"\\\x\"\$6}'); do"
#echo "sudo sed -i \"s/\$x/\\x90\\x90\\x90\\x90\\x90/g\" \$DRIVER"
#echo "done"
#echo "if [ -e /usr/X11R6/lib64/modules/dri ]; then"
#echo "echo 'ok' > /dev/null"
#echo "else"
#echo "sudo mkdir -p /usr/X11R6/lib64/modules/"
#echo "sudo ln -s /usr/lib/dri/ /usr/X11R6/lib64/modules/"
#echo "fi"
}

nvidia(){
echo "echo \"$TEXT_PROCEDURA_15\""
echo "dpkg -l | grep nvidia | awk '{print \$2}' > nv.txt"
echo "sudo dpkg -r \$(cat nv.txt | tr '\\n' ' ')"
echo "rm -f nv.txt"
echo "sudo apt-get install libpango-1.0-0 -y"
echo "sudo apt-get install libvdpau1 -y"
echo "if [ \"\$(grep prime nv.txt)\" != \"\" ];then"
echo "sudo apt-get install nvidia-prime"
echo "fi"
echo "if [ \"\$(ls | grep '304')\" != \"\" ]; then"
echo "sudo apt-get install nvidia-settings nvidia-common"
echo "fi"
echo "sudo apt-get -f install pkg-config screen-resolution-extra"
echo "/usr/bin/yes | sudo dpkg -i *.deb"
echo "if [ -e ~/.netext73/archiwum_deb ] && [ \"\$(cat ~/.netext73/archiwum_deb)\" = \"TRUE\" ]; then"
echo "sudo cp *.deb /var/cache/apt/archives/ -f"
echo "fi"
echo "if [ -e nvidia-settings ]; then"
echo "sudo cp nvidia-settings /usr/bin/ -f"
echo "rm  nvidia-settings -f"
echo "fi"
echo "rm *.deb -f"
echo "if [ \"\$(grep '#GRUB_GFXMODE' /etc/default/grub)\" != \"\" ]; then"
echo "sudo sed -i 's/#GRUB_GFXMODE.*/GRUB_GFXMODE=1024x768/' /etc/default/grub"
echo "fi"
echo "if [ \"\$(grep 'GRUB_GFXPAYLOAD_LINUX' /etc/default/grub)\" = \"\" ]; then"
echo "sudo sed -i \"s/GRUB_GFXMODE.*/GRUB_GFXMODE=1280x1024\nGRUB_GFXPAYLOAD_LINUX=1024x768/\" /etc/default/grub"
echo "fi"
echo "sudo update-initramfs -u -k all"
echo "sudo update-grub"
echo "sudo rm -f /usr/share/applications/nvidia-settings.desktop"
}


RAMIK_USUN(){
echo "sudo sed /var/spool/cron/crontabs/root -i -e '/then sync && echo 3/ d'"
echo "sudo sed /var/spool/cron/crontabs/root -i -e '/freemem.sh/ d'"
echo "sudo sed -i '/^[ \t]*$/ d' /var/spool/cron/crontabs/root"
echo "sudo rm -f /etc/cron.d/freemem.sh"
}

RAMIK(){
echo "if [ ! -e /var/spool/cron/crontabs/root ]; then"
echo "sudo mkdir -p /var/spool/cron/crontabs/"
echo "sudo touch /var/spool/cron/crontabs/root"
echo "fi"
echo "sudo sed /var/spool/cron/crontabs/root -i -e '/freemem.sh/ d'"
echo "sudo sed -i '/^[ \t]*$/ d' /var/spool/cron/crontabs/root"
echo "sudo rm -f /etc/cron.d/freemem.sh"
echo "#!/bin/bash" > ramik.txt
echo "if [ \"\$(echo \$((\$(free -m | awk '{print \$3}' | sed -n 2p)*100/\$(free -m | awk '{print \$2}' | sed -n 2p))))\" -gt \"$wartosc\" ]; then sync && echo 3 > /proc/sys/vm/drop_caches; fi" >> ramik.txt
echo "cat ramik.txt | sudo tee -a /etc/cron.d/freemem.sh"
echo "sudo chmod +x /etc/cron.d/freemem.sh"
echo "rm -f ramik.txt"
echo "echo '* * * * * /etc/cron.d/freemem.sh' | sudo tee -a /var/spool/cron/crontabs/root"
}
     
restart(){
yad-netext --center --question --title="$nazwa_skryptu" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="$TEXT_TAK:0" --button="$TEXT_NIE:1" --text="$TEXT_RESTART"
      if [ $? = 0 ]; then
      while ! yad-netext --center --on-top --title="$nazwa_skryptu1" --entry --hide-text --window-icon="/opt/NeteXt73/ikony/key.png" --image="/opt/NeteXt73/ikony/key.png" --text="NeteXt'73\n\nRoot-mode\n\n$TEXT_PASSWD1" --button="gtk-ok:0" | sudo -S reboot; do
	  if $(yad-netext --center --question --title="$nazwa_skryptu1" --window-icon="/opt/NeteXt73/ikony/pytanie.png" --image="/opt/NeteXt73/ikony/pytanie.png" --button="$TEXT_TAK:0" --button="$TEXT_NIE:1" --text="$TEXT_PASSWD"); then
	      rm /tmp/netext73/stan_netext
	      exit 0
	  fi
      done
fi

}

adres_kerneli_premium() {
#adres premium
if [ -e ~/.netext73/kernel_premium ]; then
      adres_premium=$(cat ~/.netext73/kernel_premium)
else
      adres_premium=""
fi
}

sprawdz_klucze(){
xterm -T GPG-KEY -e bash -c "echo 'sudo apt-key list';sudo apt-key list > klucze1.txt ; echo -e \"$TEXT_INSTALACJA2\""
}
usun_klucze(){
xterm -T GPG-KEY -e bash -c "echo 'Podaj hasło aby usunąć zaznaczone klucze'; for i in \$(cat usun.txt); do sudo apt-key del \$i; done; read ent; echo 'tak' > /tmp/netext73/ok.txt"
}

stan_baterii(){

info_o_baterii=$(cat /sys/class/power_supply/BAT*/uevent )
Stan_baterii="Battery status"; licznik=1

for a in "POWER_SUPPLY_NAME" "POWER_SUPPLY_STATUS" "POWER_SUPPLY_TECHNOLOGY" "POWER_SUPPLY_MODEL_NAME" "POWER_SUPPLY_MANUFACTURER" "POWER_SUPPLY_SERIAL_NUMBER" "POWER_SUPPLY_VOLTAGE_MIN_DESIGN" "POWER_SUPPLY_VOLTAGE_NOW" "POWER_SUPPLY_CAPACITY"; do
      if [ "$(grep pol ~/.netext73/jezyk)" = "" ]; then
	  bar[$licznik]="$(echo $info_o_baterii | tr ' ' '\n' | grep $a | cut -d '=' -f 1)"
	  bar[10]="POWER_SUPPLY_FULL_CAPACITY"
      fi
      stan[$licznik]="$(echo $info_o_baterii | tr ' ' '\n' | grep $a | cut -d '=' -f 2)"
      ((licznik++))
done

#pojemność
if [ "$(echo $info_o_baterii | grep POWER_SUPPLY_CHARGE_FULL_DESIGN)" != "" ]; then
    bateria_full="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_FULL= | cut -d '=' -f 2)/1000" | bc -q) mAh"
    bateria_teraz="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_NOW= | cut -d '=' -f 2)/1000" | bc -q) mAh"
else
    bateria_full="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_FULL= | cut -d '=' -f 2)/10000" | bc -q) mWh"
    bateria_teraz="$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_NOW= | cut -d '=' -f 2)/10000" | bc -q) mWh"
fi
#zmiana języka
#jezyczek
if [ "$(grep pol ~/.netext73/jezyk)" != "" ]; then
      Stan_baterii="Stan baterii"
      bar[1]="Nazwa baterii"
      bar[2]="Tryb pracy baterii"
      bar[3]="Rodzaj baterii"
      bar[4]="Model baterii"
      bar[5]="Producent baterii"
      bar[6]="Nr seryjny baterii"
      bar[7]="Konstrukcyjne napięcie baterii"
      bar[8]="Aktualne napięcie baterii"
      bar[9]="Aktualna pojemność baterii"
      bar[10]="Maksymalny poziom naładowania baterii"
      if [ "$(echo ${stan[2]})" = "Discharging" ];then
	  stan[2]="Rozładowywanie"
      elif [ "$(echo ${stan[2]})" = "Charging" ];then
	  stan[2]="Ładowywanie"
      elif [ "$(echo ${stan[2]})" = "Full" ];then
	  stan[2]="Pełna"
      else
	  stan[2]="Nieznany"
      fi
      if [ "$(echo ${stan[3]})" = "Unknown" ];then
	  stan[3]="Nieznany"
      fi
fi
#przeliczanie napięcia na V
stan[7]=$(echo "scale=2; ${stan[7]}/1000000" | bc -q)
stan[8]=$(echo "scale=2; ${stan[8]}/1000000" | bc -q)

if [ "$(echo $info_o_baterii | grep POWER_SUPPLY_ENERGY_FULL_DESIGN)" != "" ]; then
    poj_produkcyjna=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_FULL_DESIGN= | cut -d '=' -f 2)/10000" | bc -q)
    poj_teraz=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_ENERGY_FULL= | cut -d '=' -f 2)/10000" | bc -q)
    if [ "$poj_produkcyjna" != "0" ] || [ "$poj_produkcyjna" != "" ]; then
	  stan[10]=$(echo "scale=0; 100*$poj_teraz/$poj_produkcyjna" | bc -q)
    else
	  stan[10]=0
    fi
else
    poj_produkcyjna=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_FULL_DESIGN= | cut -d '=' -f 2)/10000" | bc -q)
    poj_teraz=$(echo "scale=0; $(echo $info_o_baterii | tr ' ' '\n' | grep POWER_SUPPLY_CHARGE_FULL= | cut -d '=' -f 2)/10000" | bc -q)
    if [ "$poj_produkcyjna" != "0" ] || [ "$poj_produkcyjna" != "" ]; then
	  stan[10]=$(echo "scale=0; 100*$poj_teraz/$poj_produkcyjna" | bc -q)
    else
	  stan[10]=0
    fi
fi
for i in $(seq 1 2); do
for a in $(seq 1 $(($licznik-3))); do
echo "$a:#${stan[$a]}"
done

echo "7:#${stan[7]} V"; echo "7:${stan[7]}" # V baterii
echo "8:#${stan[8]} V"; echo "8:${stan[8]}" # V baterii
echo "9:#${stan[9]} %        $bateria_teraz"; echo "9:${stan[9]}" # % baterii
echo "10:#${stan[10]} %        $bateria_full"; echo "10:${stan[10]}" # % baterii

done | yad-netext --center --multi-progress  --title="$nazwa_skryptu" --bar="$(echo ${bar[1]})" --bar="$(echo ${bar[2]})" --bar="$(echo ${bar[3]})" --bar="$(echo ${bar[4]})" --bar="$(echo ${bar[5]})" --bar="$(echo ${bar[6]})" --bar="$(echo ${bar[7]})" --bar="$(echo ${bar[8]})" --bar="$(echo ${bar[9]})"  --bar="$(echo ${bar[10]})" --auto-kill --window-icon="/opt/NeteXt73/ikony/apm.png" --image="/opt/NeteXt73/ikony/apm.png" --text="$Stan_baterii:\n" --button="gtk-ok:0"
}

ipv6_off(){
echo "sudo apt-get autoremove miredo -y && dpkg -l | awk '/^rc/{ print \$2}' | sudo xargs dpkg --purge"
echo "echo \"#disable ipv6\" | sudo tee -a /etc/sysctl.conf"
echo "echo \"net.ipv6.conf.all.disable_ipv6 = 1\" | sudo tee -a /etc/sysctl.conf"
echo "echo \"net.ipv6.conf.default.disable_ipv6 = 1\" | sudo tee -a /etc/sysctl.conf"
echo "echo \"net.ipv6.conf.lo.disable_ipv6 = 1\" | sudo tee -a /etc/sysctl.conf"
echo "sudo sysctl -p"
}

ipv6_on(){
echo "sudo apt-get install miredo -y"
echo "sudo sed -i '/#disable ipv6/d' /etc/sysctl.conf"
echo "sudo sed -i '/net.ipv6.conf.all.disable_ipv6 = 1/d' /etc/sysctl.conf"
echo "sudo sed -i '/net.ipv6.conf.default.disable_ipv6 = 1/d' /etc/sysctl.conf"
echo "sudo sed -i '/net.ipv6.conf.lo.disable_ipv6 = 1/d' /etc/sysctl.conf"
echo "sudo sysctl -p"
}

dymek(){
if [ "$(which notify-send)" != "" ];then
    notify-send "$1" "$2" "$3" "$4"
else
    yad-netext --center --info --title="$3"  --window-icon="$2" --image="$2" --text="$4" --button="gtk-ok:0"
fi
}

upstart_test(){
rm *.txt -f
sudo initctl list | grep -v -E "cryptdisks-udev|network-interface|network-interface-security|wait-for-state" > lista.txt
}


burntest(){
glxgears &
for i in $(seq 1 $(grep 'model name' /proc/cpuinfo | wc -l )); do
xterm -T "BurnTest $i" -e bash -c "echo'';echo'';echo '███╗   ██╗███████╗████████╗███████╗██╗  ██╗████████╗███████╗██████╗ ';echo '████╗  ██║██╔════╝╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝╚════██║╚════██╗';echo '██╔██╗ ██║█████╗     ██║   █████╗   ╚███╔╝    ██║       ██╔╝ █████╔╝';echo '██║╚██╗██║██╔══╝     ██║   ██╔══╝   ██╔██╗    ██║      ██╔╝  ╚═══██╗';echo '██║ ╚████║███████╗   ██║   ███████╗██╔╝ ██╗   ██║      ██║  ██████╔╝';echo '╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝  ╚═════╝ ';echo'';echo'';echo '███╗   ██╗███████╗████████╗███████╗██╗  ██╗████████╗███████╗██████╗ ';echo '████╗  ██║██╔════╝╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝╚════██║╚════██╗';echo '██╔██╗ ██║█████╗     ██║   █████╗   ╚███╔╝    ██║       ██╔╝ █████╔╝';echo '██║╚██╗██║██╔══╝     ██║   ██╔══╝   ██╔██╗    ██║      ██╔╝  ╚═══██╗';echo '██║ ╚████║███████╗   ██║   ███████╗██╔╝ ██╗   ██║      ██║  ██████╔╝';echo '╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝  ╚═════╝ ';echo'';echo'';echo '███╗   ██╗███████╗████████╗███████╗██╗  ██╗████████╗███████╗██████╗ ';echo '████╗  ██║██╔════╝╚══██╔══╝██╔════╝╚██╗██╔╝╚══██╔══╝╚════██║╚════██╗';echo '██╔██╗ ██║█████╗     ██║   █████╗   ╚███╔╝    ██║       ██╔╝ █████╔╝';echo '██║╚██╗██║██╔══╝     ██║   ██╔══╝   ██╔██╗    ██║      ██╔╝  ╚═══██╗';echo '██║ ╚████║███████╗   ██║   ███████╗██╔╝ ██╗   ██║      ██║  ██████╔╝';echo '╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚══════╝╚═╝  ╚═╝   ╚═╝      ╚═╝  ╚═════╝ ';python -c \"while True: pass\"" &
done
x-terminal-emulator -e bash -c "htop"
}

yad_wget(){

# NAME:         yad_wget
# VERSION:      0.2
# AUTHOR:       (c) 2014 Glutanimate
# DESCRIPTION:  graphical frontend to wget in form of a yad script
# FEATURES:     - display progress of multiple simultaneous downloads
#               - set maximum number of simultaneous downloads
# DEPENDENCIES: yad
#
#
# LICENSE:      GNU GPLv3 (http://www.gnu.de/documents/gpl-3.0.en.html)
#
# NOTICE:       THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. 
#               EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES 
#               PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR 
#               IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
#               AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND 
#               PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
#               YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#               IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY 
#               COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS 
#               PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, 
#               INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE 
#               THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED 
#               INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE 
#               PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER 
#               PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
#
# USAGE:        yad_wget <space-delimited URLs>
#               Closing the yad dialog will terminate all downloads in progress

# Variables and settings

MAXDLS="5" # set maximum number of simultaneous downloads

URILIST="$@" # gets list of URIs from stdin
USAGE="$0 <space-delimited URLs>"

# Usage checks

if [[ -z "$URILIST" ]]
  then
      echo "Error: No arguments provided"
      echo "Usage: $USAGE"
      exit 1
fi

download(){
    if [ "$(echo $1 | grep premium)" != "" ]; then  #jeżeli konto premium to logujemy się na hasło
	  wget --user=$US1 --password=$PASS1 "$1" 2>&1 | sed -u \
	  "s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$2:\1\n$2:#  \2\/s,  \3/"
	  RET_WGET="${PIPESTATUS[0]}"             # get return code of wget
	  if [[ "$RET_WGET" = 0 ]]                # check return code for errors
	    then
		echo "$2:100%"
		echo "$2:#$TEXT_POBIERANIE_GOTOWE"
	    else
		echo "$2:#$TEXT_BLAD_POBIERANIA"
	  fi
    else
	  wget  "$1" 2>&1 | sed -u \
	  "s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$2:\1\n$2:#  \2\/s,  \3/"
	  RET_WGET="${PIPESTATUS[0]}"             # get return code of wget
	  if [[ "$RET_WGET" = 0 ]]                # check return code for errors
	    then
		echo "$2:100%"
		echo "$2:#$TEXT_POBIERANIE_GOTOWE"
	    else
		echo "$2:#$TEXT_BLAD_POBIERANIA"
	  fi
    fi
}

# compose list of bars for yad
for URI in $URILIST; do                     # iterate through all URIs
    FILENAME="${URI##*/}"                   # extract last field of URI as filename
    YADBARS="$YADBARS --bar=$(echo $FILENAME | sed "s/1.txt/$TEXT_SUMY_KONTROLNE/"):NORM" # add filename to the list of URIs
done

IFS=" "
COUNTER="1"
DYNAMIC_COUNTER="1"

# main
# iterate through all URIs, download them in the background and 
# pipe all output simultaneously to yad
# source: http://pastebin.com/yBL2wjaY

for URI in $URILIST; do
    if [[ "$DYNAMIC_COUNTER" = "$MAXDLS" ]] # only download n files at a time
      then
          download "$URI" "$COUNTER"        # if limit reached wait until wget complete
          DYNAMIC_COUNTER="1"               # before proceeding (by not sending download() to bg)
      else
          download "$URI" "$COUNTER" &      # pass URI and URI number to download()
          DYNAMIC_COUNTER="$[$DYNAMIC_COUNTER+1]"
    fi
    COUNTER="$[$COUNTER+1]"                 # increment counter
done | yad-netext --center --multi-progress --auto-kill --auto-close $YADBARS --title "$nazwa_skryptu" \
--text "<b>$TEXT_POB2</b>" --window-icon="/opt/NeteXt73/ikony/download.png" --image="/opt/NeteXt73/ikony/download.png" --button="$TEXT_ZAMKNIJ:1"
# ↑ launch yad multi progress-bar window 
}

procesor_monitor(){
barek="--bar=total --bar="used-buffers-cached" --bar="free+buffers+cached" --bar=reserver --bar="total-reserved" --bar=shared --bar=buffers --bar=cached --bar=swap"
for i in $(seq 1 $(grep 'model name' /proc/cpuinfo | wc -l )); do
    barek="$barek --bar=$(echo "core"$i"")" 
done
petla_duza="tak"

while [ "$petla_duza" = "tak" ]; do
      echo "1:$((100*$(free -m | grep Mem | awk '{print $2}')/$(free -m | grep Mem | awk '{print $2}')))"
      echo "2:$(($(($(free -m | grep Mem | awk '{print $3}')-$(free -m | grep Mem | awk '{print $6}')-$(free -m | grep Mem | awk '{print $7}')))*100/$(free -m | grep Mem | awk '{print $2}')))"
      echo "3:$(($(($(free -m | grep Mem | awk '{print $4}')+$(free -m | grep Mem | awk '{print $6}')+$(free -m | grep Mem | awk '{print $7}')))*100/$(free -m | grep Mem | awk '{print $2}')))"
      echo "4:$(($(free -m | grep Mem | awk '{print $3}')*100/$(free -m | grep Mem | awk '{print $2}')))"
      echo "5:$(($(free -m | grep Mem | awk '{print $4}')*100/$(free -m | grep Mem | awk '{print $2}')))"
      echo "6:$((100*$(free -m | grep Mem | awk '{print $5}')/$(free -m | grep Mem | awk '{print $2}')))"
      echo "7:$((100*$(free -m | grep Mem | awk '{print $6}')/$(free -m | grep Mem | awk '{print $2}')))"
      echo "8:$((100*$(free -m | grep Mem | awk '{print $7}')/$(free -m | grep Mem | awk '{print $2}')))"
      if [ "$(free -m | grep Swap | awk '{print $4}')" = "" ] || [ "$(free -m | grep Swap | awk '{print $4}')" = "0" ]; then
	  echo "9:0"
	  echo "9:#0 MB"
      else
	  echo "9:$((100*$(free -m | grep Swap | awk '{print $3}')/$(free -m | grep Swap | awk '{print $4}')))"
	  echo "9:#$((100*$(free -m | grep Swap | awk '{print $3}')/$(free -m | grep Swap | awk '{print $4}'))) MB"
      fi
      echo "1:#$(free -m | grep Mem | awk '{print $2}') MB"
      echo "2:#$(($(free -m | grep Mem | awk '{print $3}')-$(free -m | grep Mem | awk '{print $6}')-$(free -m | grep Mem | awk '{print $7}'))) MB"
      echo "3:#$(($(free -m | grep Mem | awk '{print $4}')+$(free -m | grep Mem | awk '{print $6}')+$(free -m | grep Mem | awk '{print $7}'))) MB"
      echo "4:#$(free -m | grep Mem | awk '{print $3}') MB"
      echo "5:#$(free -m | grep Mem | awk '{print $4}') MB"
      echo "6:#$(free -m | grep Mem | awk '{print $5}') MB"
      echo "7:#$(free -m | grep Mem | awk '{print $6}') MB"
      echo "8:#$(free -m | grep Mem | awk '{print $7}') MB"
      sleep 1
      for i in $(seq 10 $(($(grep 'model name' /proc/cpuinfo | wc -l )+9))); do
	  echo "$i:$(($(cat /proc/cpuinfo | grep MHz | cut -d ' ' -f 3 | sed -n $(($i-9))'p' | sed 's/\..*//' )/60))" # * 6000MHZ/100 
	  echo "$i:#$(cat /proc/cpuinfo | grep MHz | cut -d ' ' -f 3 | sed -n $(($i-9))'p' | sed 's/\..*//' ) MHz"
      done 
done | yad-netext --title "$nazwa_skryptu" --center --multi-progress $barek --text="$(cat /proc/cpuinfo | grep 'model name' | head -n 1 | sed 's/.*: //')\nFree Memory, Cpu Core Frequency:\n" --auto-kill  --button="$TEXT_ZAMKNIJ:1" --on-top --window-icon="/opt/NeteXt73/ikony/monitor.png" --image="/opt/NeteXt73/ikony/monitor.png"
if [ "$?" != "" ]; then
    petla_duza="nie"  
fi
}
